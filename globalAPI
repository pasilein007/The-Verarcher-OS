currentVersion = 1.0
local w, h = term.getSize()
-- --  Functions
--  Drawing

local function printWithType(t, func)
	if type(t) == "table" then
		for _, v in pairs(t) do env.pcall(function() printWithType(v, func) end) end
	else func(tostring(t)) end
end

centerWrite = function(text)
	printWithType(text, function(t)
		local x, y = term.getCursorPos()
		term.setCursorPos(math.ceil((w + 1)/2 - t:len()/2), y)
		write(t)
	end)
end

centerPrint = function(text)
	printWithType(text, function(t)
		local x, y = term.getCursorPos()
		term.setCursorPos(math.ceil((w + 2)/2 - t:len()/2), y)
		print(t)
	end)
end

leftWrite = function(text)
	printWithType(text, function(t)
		local x, y = term.getCursorPos()
		term.setCursorPos(1, y)
		write(t)
	end)
end

leftPrint = function(text)
	printWithType(text, function(t)
		local x, y = term.getCursorPos()
		term.setCursorPos(1, y)
		print(t)
	end)
end

rightWrite = function(text)
	printWithType(text, function(t)
		local x, y = term.getCursorPos()
		term.setCursorPos(w - t:len() + 1, y)
		write(t)
	end)
end

rightPrint = function(text)
	printWithType(text, function(t)
		local x, y = term.getCursorPos()
		term.setCursorPos(w - t:len() + 1, y)
		print(t)
	end)
end

clearArea = function() term.clear() term.setCursorPos(1, 1) end
cPrint = function(text) api.centerPrint(text) end
cWrite = function(text) api.centerWrite(text) end
lPrint = function(text) api.leftPrint(text) end
lWrite = function(text) api.leftWrite(text) end
rPrint = function(text) api.rightPrint(text) end
rWrite = function(text) api.rightWrite(text) end

--  Prompt

prompt = function(list, dir)
	if isAdvanced() then
		for _, v in pairs(list) do
			if v.bg then term.setBackgroundColor(v.bg) end
			if v.tc then term.setTextColor(v.tc) end
			if v[2] == -1 then v[2] = math.ceil((w + 1)/2 - (v[1]:len() + 6)/2) end

			term.setCursorPos(v[2], v[3])
			write("[- " .. v[1])
			term.setCursorPos(v[2] + v[1]:len() + 3, v[3])
			write(" -]")
		end

		while true do
			local e, but, x, y = os.pullEvent()
			if e == "mouse_click" then
				for _, v in pairs(list) do
					if x >= v[2] and x <= v[2] + v[1]:len() + 5 and y + (v.coffset or 0) == v[3] then
						return v[1]
					end
				end
			end
		end
	else
		for _, v in pairs(list) do
			term.setBackgroundColor(colors.black)
			term.setTextColor(colors.white)
			if v[2] == -1 then v[2] = math.ceil((w + 1)/2 - (v[1]:len() + 4)/2) end

			term.setCursorPos(v[2], v[3])
			write("  " .. v[1])
			term.setCursorPos(v[2] + v[1]:len() + 2, v[3])
			write("  ")
		end

		local key1 = dir == "horizontal" and 203 or 200
		local key2 = dir == "horizontal" and 205 or 208

		local curSel = 1
		term.setCursorPos(list[curSel][2], list[curSel][3])
		write("[")
		term.setCursorPos(list[curSel][2] + list[curSel][1]:len() + 3, list[curSel][3])
		write("]")
		while true do
			local e, key = os.pullEvent("key")
			term.setCursorPos(list[curSel][2], list[curSel][3])
			write(" ")
			term.setCursorPos(list[curSel][2] + list[curSel][1]:len() + 3, list[curSel][3])
			write(" ")
			if key == key1 and curSel > 1 then curSel = curSel - 1
			elseif key == key2 and curSel < #list then curSel = curSel + 1
			elseif key == 28 then return list[curSel][1] end
			term.setCursorPos(list[curSel][2], list[curSel][3])
			write("[")
			term.setCursorPos(list[curSel][2] + list[curSel][1]:len() + 3, list[curSel][3])
			write("]")
		end
	end
end

scrollingPrompt = function(list, x, y, len, width, coffset)
	local wid = width
	if not wid then wid = w - 3 end

	local function updateDisplayList(items, loc, len)
		local ret = {}
		for i = 1, len do
			local item = items[i + loc - 1]
			if item then table.insert(ret, item) end
		end
		return ret
	end

	if isAdvanced() then
		local function draw(a)
			for i, v in ipairs(a) do
				term.setCursorPos(x, y + i - 1)
				write(string.rep(" ", wid))
				term.setCursorPos(x, y + i - 1)
				write("[ " .. v:sub(1, wid - 5))
				term.setCursorPos(wid + x - 2, y + i - 1)
				write("  ]")
			end
		end

		local loc = 1
		local disList = updateDisplayList(list, loc, len)
		draw(disList)
		
		while true do
			local e, but, clx, cly = os.pullEvent()
			if e == "key" and but == 200 and loc > 1 then
				loc = loc - 1
				disList = updateDisplayList(list, loc, len)
				draw(disList)
			elseif e == "key" and but == 208 and loc + len - 1 < #list then
				loc = loc + 1
				disList = updateDisplayList(list, loc, len)
				draw(disList)
			elseif e == "mouse_scroll" and but > 0 and loc + len - 1 < #list then
				loc = loc + but
				disList = updateDisplayList(list, loc, len)
				draw(disList)
			elseif e == "mouse_scroll" and but < 0 and loc > 1 then
				loc = loc + but
				disList = updateDisplayList(list, loc, len)
				draw(disList)
			elseif e == "mouse_click" then
				for i, v in ipairs(disList) do
					if clx >= x and clx <= x + wid and cly + coffset == i + y - 1 then return v end
				end
			end
		end
	else
		local function draw(a)
			for i, v in ipairs(a) do
				term.setCursorPos(x, y + i - 1)
				write(string.rep(" ", wid))
				term.setCursorPos(x, y + i - 1)
				write("[ ] " .. v:sub(1, wid - 5))
			end
		end

		local loc = 1
		local curSel = 1
		local disList = updateDisplayList(list, loc, len)
		draw(disList)
		term.setCursorPos(x + 1, y + curSel - 1)
		write("x")

		while true do
			local e, key = os.pullEvent()
			term.setCursorPos(x + 1, y + curSel - 1)
			write(" ")
			if e == "key" and key == 200 then
				if curSel > 1 then curSel = curSel - 1
				elseif loc > 1 then
					loc = loc - 1
					disList = updateDisplayList(list, loc, len)
					draw(disList)
				end
			elseif e == "key" and key == 208 then
				if curSel < #disList then curSel = curSel + 1
				elseif loc + len - 1 < #list then
					loc = loc + 1
					disList = updateDisplayList(list, loc, len)
					draw(disList)
				end
			elseif e == "key" and key == 28 then return list[curSel + loc - 1] end
			term.setCursorPos(x + 1, y + curSel - 1)
			write("x")
		end
	end
end

--  Pastebin

pastebinDownload = function(code)
	return api.urlDownload("http://pastebin.com/raw.php?i=" .. tostring(code))
end

--  GitHub

local function downloadFiles(url, path)
for i = 1, 3 do
  local response = http.get(url)
  if response then
   local data = response.readAll()
   if path then
        local f = io.open(path, "w")
        f:write(data)
        f:close()
   end
   return true
  end
end
return false
end

local function checkForUpdates(updateUrl)
for i = 1, 3 do
  local response = http.get(updateUrl)
  if response then
   local data = response.readAll()
   if data ~= currentVersion then
        print("There's an update!!!")
        sleep(1)
        if not fs.exists("/installer") then
         downloadFiles("https://raw.github.com/redstonefreak589/redos/master/installer", "/installer")
        end
        shell.run("/installer")
   end
  end
end
end
